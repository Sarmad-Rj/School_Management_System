CREATE USER schooldb IDENTIFIED BY 1234;

GRANT CONNECT, RESOURCE TO schooldb;

ALTER USER schooldb QUOTA UNLIMITED ON USERS;

CREATE TABLE students (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    father_name VARCHAR2(100),
    age NUMBER,
    student_class VARCHAR2(20),
    prev_school VARCHAR2(100),
    guardian_contact VARCHAR2(20),
    admission_fee NUMBER(10, 2),
    admission_date VARCHAR2(20)
);

CREATE TABLE teachers (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    subject VARCHAR2(100),
    assigned_class VARCHAR2(50),
    username VARCHAR2(50) UNIQUE,
    password VARCHAR2(50),
    email VARCHAR2(100) UNIQUE,
    contact VARCHAR2(20)
);

CREATE TABLE users (
    username VARCHAR2(50) PRIMARY KEY,
    password VARCHAR2(100) NOT NULL,
    role VARCHAR2(20) NOT NULL
);

CREATE TABLE classes (
  class_id INT PRIMARY KEY,
  class_name VARCHAR2(50),
  section VARCHAR2(10)
);
CREATE SEQUENCE class_id_seq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER trg_class_id
BEFORE INSERT ON classes
FOR EACH ROW
WHEN (NEW.class_id IS NULL)
BEGIN
  SELECT class_id_seq.NEXTVAL INTO :NEW.class_id FROM dual;
END;
/



CREATE TABLE subjects (
  subject_id INT PRIMARY KEY,
  subject_name VARCHAR2(50)
);

CREATE TABLE class_subjects (
  class_id INT, 
  subject_id INT,
  PRIMARY KEY (class_id, subject_id),
  FOREIGN KEY (class_id) REFERENCES classes(class_id),
  FOREIGN KEY (subject_id) REFERENCES subjects(subject_id)
);

CREATE TABLE workers (
    worker_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(100) NOT NULL,
    age            NUMBER(3),
    field          VARCHAR2(100), -- work type like janitor, electrician, etc.
    contact        VARCHAR2(20),
    salary         NUMBER(10, 2),
    hire_date      DATE,
    id_card_no     VARCHAR2(20)
);


CREATE TABLE password_resets (
  email        VARCHAR2(255) NOT NULL,
  token        VARCHAR2(255) NOT NULL,
  expiry_time  TIMESTAMP     NOT NULL,
  PRIMARY KEY (email, token),
  FOREIGN KEY (email) REFERENCES teachers(email)
);




